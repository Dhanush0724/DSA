
class Node:
    def __init__(self,data,next=None):
        self.data = data
        self.next = next
# #Brute Force method
# def reverse(head):
#     temp = head
#     stack = []

#     while temp is not None:
#         stack.append(temp.data)
#         temp = temp.next
    
#     temp = head

#     while temp is not None:
#         temp.data = stack.pop()

#         temp = temp.next
    
#     return head

#optimal solution # iterative
# def reverse(head):
#     temp = head

#     prev = None

#     while temp is not None:

#         front = temp.next
#         temp.next = prev
#         prev = temp
#         temp = front
#     return prev


### Optimal approach Recursive

def reverse(head):

    if head is None or head.next is None:
        return head
    
    new_head = reverse(head.next)
    front = head.next
    front.next = head
    head.next = None

    return new_head


def print_ll(head):
    temp = head
    while temp is not None:
        print(temp.data,end="->")
        temp = temp.next
    print()


head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)
head.next.next.next.next.next = Node(6)

head = reverse(head)
print_ll(head)
